import Long from "long";
import _m0 from "protobufjs/minimal";
import { Plan } from "./plan";
export declare const protobufPackage = "lavanet.lava.plans";
export interface PlansAddProposal {
    title: string;
    description: string;
    plans: Plan[];
}
export interface PlansDelProposal {
    title: string;
    description: string;
    plans: string[];
}
export declare const PlansAddProposal: {
    encode(message: PlansAddProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlansAddProposal;
    fromJSON(object: any): PlansAddProposal;
    toJSON(message: PlansAddProposal): unknown;
    create<I extends {
        title?: string | undefined;
        description?: string | undefined;
        plans?: {
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        plans?: ({
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        }[] & ({
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        } & {
            index?: string | undefined;
            block?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["plans"][number]["block"], keyof Long>]: never; }) | undefined;
            price?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_1 in Exclude<keyof I["plans"][number]["price"], keyof import("../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["plans"][number]["overuseRate"], keyof Long>]: never; }) | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I["plans"][number]["annualDiscountPercentage"], keyof Long>]: never; }) | undefined;
            planPolicy?: ({
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } & {
                chainPolicies?: ({
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] & ({
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                } & {
                    chainId?: string | undefined;
                    apis?: (string[] & string[] & { [K_4 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"][number]["apis"], keyof string[]>]: never; }) | undefined;
                    requirements?: ({
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] & ({
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    } & {
                        collection?: ({
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } & {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } & { [K_5 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"][number]["collection"], keyof import("../spec/api_collection").CollectionData>]: never; }) | undefined;
                        extensions?: (string[] & string[] & { [K_6 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"][number]["extensions"], keyof string[]>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"][number], keyof import("./policy").ChainRequirement>]: never; })[] & { [K_8 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"], keyof {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"][number], keyof import("./policy").ChainPolicy>]: never; })[] & { [K_10 in Exclude<keyof I["plans"][number]["planPolicy"]["chainPolicies"], keyof {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[]>]: never; }) | undefined;
                geolocationProfile?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_11 in Exclude<keyof I["plans"][number]["planPolicy"]["geolocationProfile"], keyof Long>]: never; }) | undefined;
                totalCuLimit?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_12 in Exclude<keyof I["plans"][number]["planPolicy"]["totalCuLimit"], keyof Long>]: never; }) | undefined;
                epochCuLimit?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_13 in Exclude<keyof I["plans"][number]["planPolicy"]["epochCuLimit"], keyof Long>]: never; }) | undefined;
                maxProvidersToPair?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_14 in Exclude<keyof I["plans"][number]["planPolicy"]["maxProvidersToPair"], keyof Long>]: never; }) | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: (string[] & string[] & { [K_15 in Exclude<keyof I["plans"][number]["planPolicy"]["selectedProviders"], keyof string[]>]: never; }) | undefined;
            } & { [K_16 in Exclude<keyof I["plans"][number]["planPolicy"], keyof import("./policy").Policy>]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I["plans"][number], keyof Plan>]: never; })[] & { [K_18 in Exclude<keyof I["plans"], keyof {
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_19 in Exclude<keyof I, keyof PlansAddProposal>]: never; }>(base?: I | undefined): PlansAddProposal;
    fromPartial<I_1 extends {
        title?: string | undefined;
        description?: string | undefined;
        plans?: {
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        plans?: ({
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        }[] & ({
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        } & {
            index?: string | undefined;
            block?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_20 in Exclude<keyof I_1["plans"][number]["block"], keyof Long>]: never; }) | undefined;
            price?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_21 in Exclude<keyof I_1["plans"][number]["price"], keyof import("../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_22 in Exclude<keyof I_1["plans"][number]["overuseRate"], keyof Long>]: never; }) | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_23 in Exclude<keyof I_1["plans"][number]["annualDiscountPercentage"], keyof Long>]: never; }) | undefined;
            planPolicy?: ({
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } & {
                chainPolicies?: ({
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] & ({
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                } & {
                    chainId?: string | undefined;
                    apis?: (string[] & string[] & { [K_24 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"][number]["apis"], keyof string[]>]: never; }) | undefined;
                    requirements?: ({
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] & ({
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    } & {
                        collection?: ({
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } & {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } & { [K_25 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"][number]["collection"], keyof import("../spec/api_collection").CollectionData>]: never; }) | undefined;
                        extensions?: (string[] & string[] & { [K_26 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"][number]["extensions"], keyof string[]>]: never; }) | undefined;
                    } & { [K_27 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"][number], keyof import("./policy").ChainRequirement>]: never; })[] & { [K_28 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"][number]["requirements"], keyof {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[]>]: never; }) | undefined;
                } & { [K_29 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"][number], keyof import("./policy").ChainPolicy>]: never; })[] & { [K_30 in Exclude<keyof I_1["plans"][number]["planPolicy"]["chainPolicies"], keyof {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[]>]: never; }) | undefined;
                geolocationProfile?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_31 in Exclude<keyof I_1["plans"][number]["planPolicy"]["geolocationProfile"], keyof Long>]: never; }) | undefined;
                totalCuLimit?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_32 in Exclude<keyof I_1["plans"][number]["planPolicy"]["totalCuLimit"], keyof Long>]: never; }) | undefined;
                epochCuLimit?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_33 in Exclude<keyof I_1["plans"][number]["planPolicy"]["epochCuLimit"], keyof Long>]: never; }) | undefined;
                maxProvidersToPair?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_34 in Exclude<keyof I_1["plans"][number]["planPolicy"]["maxProvidersToPair"], keyof Long>]: never; }) | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: (string[] & string[] & { [K_35 in Exclude<keyof I_1["plans"][number]["planPolicy"]["selectedProviders"], keyof string[]>]: never; }) | undefined;
            } & { [K_36 in Exclude<keyof I_1["plans"][number]["planPolicy"], keyof import("./policy").Policy>]: never; }) | undefined;
        } & { [K_37 in Exclude<keyof I_1["plans"][number], keyof Plan>]: never; })[] & { [K_38 in Exclude<keyof I_1["plans"], keyof {
            index?: string | undefined;
            block?: string | number | Long | undefined;
            price?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            allowOveruse?: boolean | undefined;
            overuseRate?: string | number | Long | undefined;
            description?: string | undefined;
            type?: string | undefined;
            annualDiscountPercentage?: string | number | Long | undefined;
            planPolicy?: {
                chainPolicies?: {
                    chainId?: string | undefined;
                    apis?: string[] | undefined;
                    requirements?: {
                        collection?: {
                            apiInterface?: string | undefined;
                            internalPath?: string | undefined;
                            type?: string | undefined;
                            addOn?: string | undefined;
                        } | undefined;
                        extensions?: string[] | undefined;
                    }[] | undefined;
                }[] | undefined;
                geolocationProfile?: string | number | Long | undefined;
                totalCuLimit?: string | number | Long | undefined;
                epochCuLimit?: string | number | Long | undefined;
                maxProvidersToPair?: string | number | Long | undefined;
                selectedProvidersMode?: import("./policy").selectedProvidersMode | undefined;
                selectedProviders?: string[] | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_39 in Exclude<keyof I_1, keyof PlansAddProposal>]: never; }>(object: I_1): PlansAddProposal;
};
export declare const PlansDelProposal: {
    encode(message: PlansDelProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlansDelProposal;
    fromJSON(object: any): PlansDelProposal;
    toJSON(message: PlansDelProposal): unknown;
    create<I extends {
        title?: string | undefined;
        description?: string | undefined;
        plans?: string[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        plans?: (string[] & string[] & { [K in Exclude<keyof I["plans"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof PlansDelProposal>]: never; }>(base?: I | undefined): PlansDelProposal;
    fromPartial<I_1 extends {
        title?: string | undefined;
        description?: string | undefined;
        plans?: string[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        plans?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["plans"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof PlansDelProposal>]: never; }>(object: I_1): PlansDelProposal;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
