import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Endpoint } from "../epochstorage/endpoint";
import { RelaySession } from "./relay";
export declare const protobufPackage = "lavanet.lava.pairing";
export interface MsgStakeProvider {
    creator: string;
    chainID: string;
    amount?: Coin;
    endpoints: Endpoint[];
    geolocation: Long;
    moniker: string;
}
export interface MsgStakeProviderResponse {
}
export interface MsgUnstakeProvider {
    creator: string;
    chainID: string;
}
export interface MsgUnstakeProviderResponse {
}
export interface MsgRelayPayment {
    creator: string;
    relays: RelaySession[];
    descriptionString: string;
}
export interface MsgRelayPaymentResponse {
}
export interface MsgFreezeProvider {
    creator: string;
    chainIds: string[];
    reason: string;
}
export interface MsgFreezeProviderResponse {
}
export interface MsgUnfreezeProvider {
    creator: string;
    chainIds: string[];
}
export interface MsgUnfreezeProviderResponse {
}
export declare const MsgStakeProvider: {
    encode(message: MsgStakeProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgStakeProvider;
    fromJSON(object: any): MsgStakeProvider;
    toJSON(message: MsgStakeProvider): unknown;
    create<I extends {
        creator?: string | undefined;
        chainID?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        endpoints?: {
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        }[] | undefined;
        geolocation?: string | number | Long | undefined;
        moniker?: string | undefined;
    } & {
        creator?: string | undefined;
        chainID?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["amount"], keyof Coin>]: never; }) | undefined;
        endpoints?: ({
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        }[] & ({
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        } & {
            iPPORT?: string | undefined;
            geolocation?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_1 in Exclude<keyof I["endpoints"][number]["geolocation"], keyof Long>]: never; }) | undefined;
            addons?: (string[] & string[] & { [K_2 in Exclude<keyof I["endpoints"][number]["addons"], keyof string[]>]: never; }) | undefined;
            apiInterfaces?: (string[] & string[] & { [K_3 in Exclude<keyof I["endpoints"][number]["apiInterfaces"], keyof string[]>]: never; }) | undefined;
            extensions?: (string[] & string[] & { [K_4 in Exclude<keyof I["endpoints"][number]["extensions"], keyof string[]>]: never; }) | undefined;
        } & { [K_5 in Exclude<keyof I["endpoints"][number], keyof Endpoint>]: never; })[] & { [K_6 in Exclude<keyof I["endpoints"], keyof {
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        }[]>]: never; }) | undefined;
        geolocation?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_7 in Exclude<keyof I["geolocation"], keyof Long>]: never; }) | undefined;
        moniker?: string | undefined;
    } & { [K_8 in Exclude<keyof I, keyof MsgStakeProvider>]: never; }>(base?: I | undefined): MsgStakeProvider;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        chainID?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        endpoints?: {
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        }[] | undefined;
        geolocation?: string | number | Long | undefined;
        moniker?: string | undefined;
    } & {
        creator?: string | undefined;
        chainID?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_9 in Exclude<keyof I_1["amount"], keyof Coin>]: never; }) | undefined;
        endpoints?: ({
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        }[] & ({
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        } & {
            iPPORT?: string | undefined;
            geolocation?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_10 in Exclude<keyof I_1["endpoints"][number]["geolocation"], keyof Long>]: never; }) | undefined;
            addons?: (string[] & string[] & { [K_11 in Exclude<keyof I_1["endpoints"][number]["addons"], keyof string[]>]: never; }) | undefined;
            apiInterfaces?: (string[] & string[] & { [K_12 in Exclude<keyof I_1["endpoints"][number]["apiInterfaces"], keyof string[]>]: never; }) | undefined;
            extensions?: (string[] & string[] & { [K_13 in Exclude<keyof I_1["endpoints"][number]["extensions"], keyof string[]>]: never; }) | undefined;
        } & { [K_14 in Exclude<keyof I_1["endpoints"][number], keyof Endpoint>]: never; })[] & { [K_15 in Exclude<keyof I_1["endpoints"], keyof {
            iPPORT?: string | undefined;
            geolocation?: string | number | Long | undefined;
            addons?: string[] | undefined;
            apiInterfaces?: string[] | undefined;
            extensions?: string[] | undefined;
        }[]>]: never; }) | undefined;
        geolocation?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_16 in Exclude<keyof I_1["geolocation"], keyof Long>]: never; }) | undefined;
        moniker?: string | undefined;
    } & { [K_17 in Exclude<keyof I_1, keyof MsgStakeProvider>]: never; }>(object: I_1): MsgStakeProvider;
};
export declare const MsgStakeProviderResponse: {
    encode(_: MsgStakeProviderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgStakeProviderResponse;
    fromJSON(_: any): MsgStakeProviderResponse;
    toJSON(_: MsgStakeProviderResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgStakeProviderResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgStakeProviderResponse;
};
export declare const MsgUnstakeProvider: {
    encode(message: MsgUnstakeProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnstakeProvider;
    fromJSON(object: any): MsgUnstakeProvider;
    toJSON(message: MsgUnstakeProvider): unknown;
    create<I extends {
        creator?: string | undefined;
        chainID?: string | undefined;
    } & {
        creator?: string | undefined;
        chainID?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgUnstakeProvider>]: never; }>(base?: I | undefined): MsgUnstakeProvider;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        chainID?: string | undefined;
    } & {
        creator?: string | undefined;
        chainID?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof MsgUnstakeProvider>]: never; }>(object: I_1): MsgUnstakeProvider;
};
export declare const MsgUnstakeProviderResponse: {
    encode(_: MsgUnstakeProviderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnstakeProviderResponse;
    fromJSON(_: any): MsgUnstakeProviderResponse;
    toJSON(_: MsgUnstakeProviderResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgUnstakeProviderResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgUnstakeProviderResponse;
};
export declare const MsgRelayPayment: {
    encode(message: MsgRelayPayment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayPayment;
    fromJSON(object: any): MsgRelayPayment;
    toJSON(message: MsgRelayPayment): unknown;
    create<I extends {
        creator?: string | undefined;
        relays?: {
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        }[] | undefined;
        descriptionString?: string | undefined;
    } & {
        creator?: string | undefined;
        relays?: ({
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        }[] & ({
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        } & {
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["relays"][number]["sessionId"], keyof Long>]: never; }) | undefined;
            cuSum?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_1 in Exclude<keyof I["relays"][number]["cuSum"], keyof Long>]: never; }) | undefined;
            provider?: string | undefined;
            relayNum?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_2 in Exclude<keyof I["relays"][number]["relayNum"], keyof Long>]: never; }) | undefined;
            qosReport?: ({
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & { [K_3 in Exclude<keyof I["relays"][number]["qosReport"], keyof import("./relay").QualityOfServiceReport>]: never; }) | undefined;
            epoch?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_4 in Exclude<keyof I["relays"][number]["epoch"], keyof Long>]: never; }) | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: ({
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } & {
                cuAllocation?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_5 in Exclude<keyof I["relays"][number]["badge"]["cuAllocation"], keyof Long>]: never; }) | undefined;
                epoch?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_6 in Exclude<keyof I["relays"][number]["badge"]["epoch"], keyof Long>]: never; }) | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } & { [K_7 in Exclude<keyof I["relays"][number]["badge"], keyof import("./relay").Badge>]: never; }) | undefined;
            qosExcellenceReport?: ({
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & { [K_8 in Exclude<keyof I["relays"][number]["qosExcellenceReport"], keyof import("./relay").QualityOfServiceReport>]: never; }) | undefined;
        } & { [K_9 in Exclude<keyof I["relays"][number], keyof RelaySession>]: never; })[] & { [K_10 in Exclude<keyof I["relays"], keyof {
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        descriptionString?: string | undefined;
    } & { [K_11 in Exclude<keyof I, keyof MsgRelayPayment>]: never; }>(base?: I | undefined): MsgRelayPayment;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        relays?: {
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        }[] | undefined;
        descriptionString?: string | undefined;
    } & {
        creator?: string | undefined;
        relays?: ({
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        }[] & ({
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        } & {
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_12 in Exclude<keyof I_1["relays"][number]["sessionId"], keyof Long>]: never; }) | undefined;
            cuSum?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_13 in Exclude<keyof I_1["relays"][number]["cuSum"], keyof Long>]: never; }) | undefined;
            provider?: string | undefined;
            relayNum?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_14 in Exclude<keyof I_1["relays"][number]["relayNum"], keyof Long>]: never; }) | undefined;
            qosReport?: ({
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & { [K_15 in Exclude<keyof I_1["relays"][number]["qosReport"], keyof import("./relay").QualityOfServiceReport>]: never; }) | undefined;
            epoch?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_16 in Exclude<keyof I_1["relays"][number]["epoch"], keyof Long>]: never; }) | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: ({
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } & {
                cuAllocation?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_17 in Exclude<keyof I_1["relays"][number]["badge"]["cuAllocation"], keyof Long>]: never; }) | undefined;
                epoch?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_18 in Exclude<keyof I_1["relays"][number]["badge"]["epoch"], keyof Long>]: never; }) | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } & { [K_19 in Exclude<keyof I_1["relays"][number]["badge"], keyof import("./relay").Badge>]: never; }) | undefined;
            qosExcellenceReport?: ({
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } & { [K_20 in Exclude<keyof I_1["relays"][number]["qosExcellenceReport"], keyof import("./relay").QualityOfServiceReport>]: never; }) | undefined;
        } & { [K_21 in Exclude<keyof I_1["relays"][number], keyof RelaySession>]: never; })[] & { [K_22 in Exclude<keyof I_1["relays"], keyof {
            specId?: string | undefined;
            contentHash?: Uint8Array | undefined;
            sessionId?: string | number | Long | undefined;
            cuSum?: string | number | Long | undefined;
            provider?: string | undefined;
            relayNum?: string | number | Long | undefined;
            qosReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
            epoch?: string | number | Long | undefined;
            unresponsiveProviders?: Uint8Array | undefined;
            lavaChainId?: string | undefined;
            sig?: Uint8Array | undefined;
            badge?: {
                cuAllocation?: string | number | Long | undefined;
                epoch?: string | number | Long | undefined;
                address?: string | undefined;
                lavaChainId?: string | undefined;
                projectSig?: Uint8Array | undefined;
            } | undefined;
            qosExcellenceReport?: {
                latency?: string | undefined;
                availability?: string | undefined;
                sync?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        descriptionString?: string | undefined;
    } & { [K_23 in Exclude<keyof I_1, keyof MsgRelayPayment>]: never; }>(object: I_1): MsgRelayPayment;
};
export declare const MsgRelayPaymentResponse: {
    encode(_: MsgRelayPaymentResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRelayPaymentResponse;
    fromJSON(_: any): MsgRelayPaymentResponse;
    toJSON(_: MsgRelayPaymentResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgRelayPaymentResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgRelayPaymentResponse;
};
export declare const MsgFreezeProvider: {
    encode(message: MsgFreezeProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgFreezeProvider;
    fromJSON(object: any): MsgFreezeProvider;
    toJSON(message: MsgFreezeProvider): unknown;
    create<I extends {
        creator?: string | undefined;
        chainIds?: string[] | undefined;
        reason?: string | undefined;
    } & {
        creator?: string | undefined;
        chainIds?: (string[] & string[] & { [K in Exclude<keyof I["chainIds"], keyof string[]>]: never; }) | undefined;
        reason?: string | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgFreezeProvider>]: never; }>(base?: I | undefined): MsgFreezeProvider;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        chainIds?: string[] | undefined;
        reason?: string | undefined;
    } & {
        creator?: string | undefined;
        chainIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["chainIds"], keyof string[]>]: never; }) | undefined;
        reason?: string | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgFreezeProvider>]: never; }>(object: I_1): MsgFreezeProvider;
};
export declare const MsgFreezeProviderResponse: {
    encode(_: MsgFreezeProviderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgFreezeProviderResponse;
    fromJSON(_: any): MsgFreezeProviderResponse;
    toJSON(_: MsgFreezeProviderResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgFreezeProviderResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgFreezeProviderResponse;
};
export declare const MsgUnfreezeProvider: {
    encode(message: MsgUnfreezeProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnfreezeProvider;
    fromJSON(object: any): MsgUnfreezeProvider;
    toJSON(message: MsgUnfreezeProvider): unknown;
    create<I extends {
        creator?: string | undefined;
        chainIds?: string[] | undefined;
    } & {
        creator?: string | undefined;
        chainIds?: (string[] & string[] & { [K in Exclude<keyof I["chainIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgUnfreezeProvider>]: never; }>(base?: I | undefined): MsgUnfreezeProvider;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        chainIds?: string[] | undefined;
    } & {
        creator?: string | undefined;
        chainIds?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["chainIds"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgUnfreezeProvider>]: never; }>(object: I_1): MsgUnfreezeProvider;
};
export declare const MsgUnfreezeProviderResponse: {
    encode(_: MsgUnfreezeProviderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnfreezeProviderResponse;
    fromJSON(_: any): MsgUnfreezeProviderResponse;
    toJSON(_: MsgUnfreezeProviderResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgUnfreezeProviderResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgUnfreezeProviderResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    StakeProvider(request: MsgStakeProvider): Promise<MsgStakeProviderResponse>;
    UnstakeProvider(request: MsgUnstakeProvider): Promise<MsgUnstakeProviderResponse>;
    RelayPayment(request: MsgRelayPayment): Promise<MsgRelayPaymentResponse>;
    FreezeProvider(request: MsgFreezeProvider): Promise<MsgFreezeProviderResponse>;
    /** this line is used by starport scaffolding # proto/tx/rpc */
    UnfreezeProvider(request: MsgUnfreezeProvider): Promise<MsgUnfreezeProviderResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    StakeProvider(request: MsgStakeProvider): Promise<MsgStakeProviderResponse>;
    UnstakeProvider(request: MsgUnstakeProvider): Promise<MsgUnstakeProviderResponse>;
    RelayPayment(request: MsgRelayPayment): Promise<MsgRelayPaymentResponse>;
    FreezeProvider(request: MsgFreezeProvider): Promise<MsgFreezeProviderResponse>;
    UnfreezeProvider(request: MsgUnfreezeProvider): Promise<MsgUnfreezeProviderResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
